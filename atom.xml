<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title>Codurance</title>
    <link href="//atom.xml" rel="self"/>
    <link href="/"/>
    <updated>2014-11-11T14:23:37+00:00</updated>
    <id>http://codurance.com</id>
    <author>
        <name>Codurance</name>
        <email>hello@codurance.com</email>
    </author>
    <rights>Copyright (c) Codurance</rights>
    
    <entry>
        <id>/2014/11/10/not-all-managers-are-stupid/</id>
        <title>Not all managers are stupid</title>
        <link href="/2014/11/10/not-all-managers-are-stupid/"/>
        <published>2014-11-10T04:20:00+00:00</published>
        
        <summary type="html">&lt;p&gt;&lt;em&gt;(The following story was a bit altered in order to keep it short(ish) and to protect the innocents)&lt;/em&gt;&lt;/p&gt;

</summary>
        
    </entry>
    
    <entry>
        <id>/2014/11/09/too-many-cooks/</id>
        <title>Too Many Cooks</title>
        <link href="/2014/11/09/too-many-cooks/"/>
        <published>2014-11-09T11:00:00+00:00</published>
        
        <summary type="html">&lt;p&gt;Last week, &lt;a href=&quot;http://codurance.com/aboutus/ourteam/&quot;&gt;Sandro&lt;/a&gt; and I flew to Bucharest to meet &lt;a href=&quot;http://alexbolboaca.ro/&quot;&gt;Alex&lt;/a&gt; and &lt;a href=&quot;http://adrianbolboaca.ro/&quot;&gt;Adi Bolboaca&lt;/a&gt;, &lt;a href=&quot;http://about.me/aksalmi&quot;&gt;Aki Salmi&lt;/a&gt; and &lt;a href=&quot;http://code-cop.org/&quot;&gt;Peter Kofler&lt;/a&gt;. We didn&#39;t know what to expect: the agenda was to try a &quot;hardcore coderetreat&quot;, in which the constraints would be incredibly difficult, but when you have six headstrong, opinionated people in a room, you really have no idea what&#39;s going to happen.&lt;/p&gt;

</summary>
        
    </entry>
    
    <entry>
        <id>/2014/10/03/guide-to-deploying-artifacts-with-jenkins/</id>
        <title>A Very Quick Guide to Deploying Artifacts With Jenkins</title>
        <link href="/2014/10/03/guide-to-deploying-artifacts-with-jenkins/"/>
        <published>2014-10-03T00:00:00+00:00</published>
        
        <summary type="html">&lt;p&gt;&lt;a href=&quot;http://jenkins-ci.org/&quot;&gt;Jenkins&lt;/a&gt; is an open-source continuous integration server. At Codurance, we use Jenkins to build and test projects to make sure everything is in order before handing over to the client.&lt;/p&gt;

</summary>
        
    </entry>
    
    <entry>
        <id>/2014/10/02/highly-strung/</id>
        <title>Highly Strung</title>
        <link href="/2014/10/02/highly-strung/"/>
        <published>2014-10-02T13:00:00+00:00</published>
        
        <summary type="html">&lt;p&gt;This blog post is way overdue.&lt;/p&gt;

</summary>
        
    </entry>
    
    <entry>
        <id>/2014/07/27/tell-dont-ask/</id>
        <title>Tell don't ask</title>
        <link href="/2014/07/27/tell-dont-ask/"/>
        <published>2014-07-27T12:00:00+00:00</published>
        
        <summary type="html">&lt;p&gt;&lt;strong&gt;Tell don&#39;t ask&lt;/strong&gt; we have all heard it. Yet it is one of the most violated principles. It is also one of the most important principles to follow if you want a design that is flexible to change.&lt;/p&gt;

</summary>
        
    </entry>
    
    <entry>
        <id>/2014/07/18/queue-based-synchronisation/</id>
        <title>Queue Based Synchronisation</title>
        <link href="/2014/07/18/queue-based-synchronisation/"/>
        <published>2014-07-18T12:00:00+00:00</published>
        
        <summary type="html">&lt;p&gt;The first rule of using locks for thread synchronisation is, &lt;strong&gt;&quot;Do NOT use them!&quot;&lt;/strong&gt;. Recently I saw an implementation that made heavy use of locks to synchronise access to a shared cache between two threads. The overall approach is explained in the diagram below:&lt;/p&gt;

</summary>
        
    </entry>
    
    <entry>
        <id>/2014/07/15/mob-programming/</id>
        <title>Mob Programming, and the importance of fun at work</title>
        <link href="/2014/07/15/mob-programming/"/>
        <published>2014-07-15T12:00:00+00:00</published>
        
        <summary type="html">&lt;p&gt;It&#39;s been a few weeks since SoCraTes UK 2014, and I&#39;ve had some time to reflect on the event and my learning experiences. Today, I want to talk about the biggest things that stood out for me.&lt;/p&gt;

</summary>
        
    </entry>
    
    <entry>
        <id>/2014/07/10/GooglePlus-sign-in-with-Scala/</id>
        <title>Google+ Sign-In with Scalatra</title>
        <link href="/2014/07/10/GooglePlus-sign-in-with-Scala/"/>
        <published>2014-07-10T15:35:00+00:00</published>
        
        <summary type="html">&lt;h3&gt;The requirements&lt;/h3&gt;

</summary>
        
    </entry>
    
    <entry>
        <id>/2014/05/26/a-craftsman-is/</id>
        <title>A Software Craftsman Is</title>
        <link href="/2014/05/26/a-craftsman-is/"/>
        <published>2014-05-26T15:00:00+00:00</published>
        
        <summary type="html">&lt;p&gt;Someone who aspires to quality.&lt;/p&gt;

</summary>
        
    </entry>
    
    <entry>
        <id>/2014/05/24/tdd-is-not-about-you/</id>
        <title>TDD is NOT (just) about you</title>
        <link href="/2014/05/24/tdd-is-not-about-you/"/>
        <published>2014-05-24T22:18:00+00:00</published>
        
        <summary type="html">&lt;p&gt;Recently, another big debate about TDD started on Twitter and blogosphere. Is TDD dead? (No, that&#39;s ridiculous.) Does it improve or damage our design? Does it make us faster or slow us down? &lt;a href=&quot;http://twitter.com/sebrose&quot;&gt;Seb Rose&lt;/a&gt; compiled a &lt;a href=&quot;http://claysnow.co.uk/to-tdd-or-not-to-tdd/&quot;&gt;list of blog posts and tweets&lt;/a&gt; about it, so I won’t repeat them here. If you are not aware of the whole discussions, please read all the links Seb collected at the end of &lt;a href=&quot;http://claysnow.co.uk/to-tdd-or-not-to-tdd/&quot;&gt;his post&lt;/a&gt;.&lt;/p&gt;

</summary>
        
    </entry>
    
    <entry>
        <id>/2014/04/13/explanatory-methods/</id>
        <title>Screencast - Explanatory Methods</title>
        <link href="/2014/04/13/explanatory-methods/"/>
        <published>2014-04-13T20:00:00+00:00</published>
        
        <summary type="html">&lt;p&gt;On 9th of April 2014, we created our first screencast on our new &lt;a href=&quot;https://www.youtube.com/user/codurance&quot;&gt;YouTube channel&lt;/a&gt;. The idea is to have a series of (reasonably) short videos explaining some of the techniques we use when developing software. The videos will range from basic to advanced topics but in no particular order.&lt;/p&gt;

</summary>
        
    </entry>
    
    <entry>
        <id>/2014/04/10/keeping-the-domain-in-core/</id>
        <title>Keeping the domain in the core</title>
        <link href="/2014/04/10/keeping-the-domain-in-core/"/>
        <published>2014-04-10T00:30:00+00:00</published>
        
        <summary type="html">&lt;p&gt;Inspired by Alistair Cockburn&#39;s excellent &lt;a href=&quot;http://alistair.cockburn.us/Hexagonal+architecture&quot;&gt;article&lt;/a&gt; on Hexagonal Architecture, on our current project we have kept the core domain of our application independent of the infrastructure by taking the simple decision to divide our code into two main sections (higher level packages): infrastructure and core.&lt;/p&gt;

</summary>
        
    </entry>
    
    <entry>
        <id>/2014/03/11/just-another-day-at-the-office/</id>
        <title>Just Another Day at the Office</title>
        <link href="/2014/03/11/just-another-day-at-the-office/"/>
        <published>2014-03-11T20:00:00+00:00</published>
        
        <summary type="html">&lt;p&gt;On 4th of March 2014, a few days before my baby boy Samuel completed two months, a well-regarded cardiologist—let&#39;s call him &lt;em&gt;Dr. Smith&lt;/em&gt;—gave us the news that Samuel had a heart condition called &lt;a href=&quot;http://en.wikipedia.org/wiki/Pulmonary_valve_stenosis&quot;&gt;pulmonary valve stenosis&lt;/a&gt;. Dr. Smith&#39;s recommendation was that Samuel had a heart procedure called &lt;a href=&quot;http://tchin.org/resource_room/c_art_02.htm&quot;&gt;balloon pulmonary valvotomy&lt;/a&gt; or &lt;a href=&quot;http://tchin.org/resource_room/c_art_02.htm&quot;&gt;ballon valvuloplasty&lt;/a&gt; as soon as possible. The procedure was scheduled to 11th of March 2014, on &lt;a href=&quot;http://theharleystreetclinic.co.uk/&quot;&gt;The Harley Street Clinic&lt;/a&gt;. Needless to say, the whole family was devastated.&lt;/p&gt;

</summary>
        
    </entry>
    
    <entry>
        <id>/2014/03/03/craftsmanship-book-released/</id>
        <title>Software Craftsmanship book is now finished</title>
        <link href="/2014/03/03/craftsmanship-book-released/"/>
        <published>2014-03-03T11:37:00+00:00</published>
        
        <summary type="html">&lt;p&gt;Yesterday a wonderful 19-month journey came to an end. I released the last chapter of my book &lt;a href=&quot;http://leanpub.com/socra&quot;&gt;Software Craftsmanship: Professionalism, Pragmatism, Pride&lt;/a&gt;. As an avid reader since a young age, writing a book was always something I wanted to do. For me, it didn&#39;t matter if people would read it or not; I just wanted to write a book I was proud of. I wanted to write a book that would help developers and companies to get better. A book that could inspire developers to care about their craft. I also wanted a book that my kids, at some point in the future, could read and be inspired, even if they had chosen different professions. I&#39;m not sure if they will read it or be inspired by it, but at least I&#39;m giving my best shot.&lt;/p&gt;

</summary>
        
    </entry>
    
    <entry>
        <id>/2014/02/19/pairing-without-programming/</id>
        <title>Pairing without Programming</title>
        <link href="/2014/02/19/pairing-without-programming/"/>
        <published>2014-02-19T17:00:00+00:00</published>
        
        <summary type="html">&lt;p&gt;Pairing is often associated with programming. There&#39;s a Wikipedia article about pair programming, but nothing on pairing in general. And yet, it&#39;s a fantastic technique for getting anything done well, especially when neither of you really know exactly how to approach a problem.&lt;/p&gt;

</summary>
        
    </entry>
    
</feed>