<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title>Codurance</title>
    <link href="/atom.xml" rel="self"/>
    <link href=""/>
    <updated>2015-06-07T18:31:17+00:00</updated>
    <id>http://codurance.com</id>
    <author>
        <name>Codurance</name>
        <email>hello@codurance.com</email>
    </author>
    <rights>Copyright (c) Codurance</rights>
    
    <entry>
        <id>/2015/06/07/conversing-on-conversations-at-socrates-uk-2015/</id>
        <title>Conversations About Conversations at SoCraTes UK 2015</title>
        <link href="/2015/06/07/conversing-on-conversations-at-socrates-uk-2015/"/>
        <published>2015-06-07T18:00:00+00:00</published>
        
        <summary type="html">&lt;p&gt;OK, brain dump time.&lt;/p&gt;

</summary>
        
    </entry>
    
    <entry>
        <id>/2015/06/04/crank-up-the-volume/</id>
        <title>Crank Up The Volume And Forget Your Pomodoros</title>
        <link href="/2015/06/04/crank-up-the-volume/"/>
        <published>2015-06-04T08:00:00+00:00</published>
        
        <summary type="html">&lt;p&gt;Together, &lt;a href=&quot;https://twitter.com/stevelydford&quot;&gt;Steve Lydford&lt;/a&gt; and I came up with a way to work that we don&#39;t think has been put to paper before.&lt;/p&gt;

</summary>
        
    </entry>
    
    <entry>
        <id>/2015/05/19/working-with-slas/</id>
        <title>Working with SLAs</title>
        <link href="/2015/05/19/working-with-slas/"/>
        <published>2015-05-19T13:00:00+00:00</published>
        
        <summary type="html">&lt;p&gt;If you spend any time designing applications which use third-party platforms and services, you will have spent time considering Service Level Agreements (SLAs). The &lt;em&gt;tl;dr&lt;/em&gt; part of any SLA, the bit the everyone is actually interested in, is the uptime guarantee. However, this seemingly simple number has some hidden meanings that you should be aware of when designing applications and reporting your SLAs to customers.&lt;/p&gt;

</summary>
        
    </entry>
    
    <entry>
        <id>/2015/05/18/applying-transformation-priority-premise-to-roman-numerals-kata/</id>
        <title>Applying Transformation Priority Premise to Roman Numerals Kata</title>
        <link href="/2015/05/18/applying-transformation-priority-premise-to-roman-numerals-kata/"/>
        <published>2015-05-18T17:00:00+00:00</published>
        
        <summary type="html">&lt;h1&gt;Applying Transformation Priority Premise to Roman Numerals Kata&lt;/h1&gt;

</summary>
        
    </entry>
    
    <entry>
        <id>/2015/05/12/does-tdd-lead-to-good-design/</id>
        <title>Does TDD really lead to good design?</title>
        <link href="/2015/05/12/does-tdd-lead-to-good-design/"/>
        <published>2015-05-12T14:32:00+00:00</published>
        
        <summary type="html">&lt;p&gt;Recently I tweeted that &lt;a href=&quot;https://twitter.com/sandromancuso/status/588503877235781632&quot;&gt;TDD can’t lead to a good design if we don’t know what good design looks like&lt;/a&gt;. I was also saying that we probably should teach design before TDD (or at least, at the same time). This tweet led to a discussions with &lt;a href=&quot;https://twitter.com/jbrains&quot;&gt;J.B. Rainsberger&lt;/a&gt;, &lt;a href=&quot;https://twitter.com/RonJeffries&quot;&gt;Ron Jeffries&lt;/a&gt;, and a few others. J.B. and I ended up having a live &lt;a href=&quot;https://www.youtube.com/watch?v=ty3p5VDcoOI&quot;&gt;discussion on Hangout on Air&lt;/a&gt; later on.&lt;/p&gt;

</summary>
        
    </entry>
    
    <entry>
        <id>/2015/05/06/interview-with-sandro-mancuso/</id>
        <title>Q&A about The Software Craftsman</title>
        <link href="/2015/05/06/interview-with-sandro-mancuso/"/>
        <published>2015-05-06T01:26:00+00:00</published>
        
        <summary type="html">&lt;p&gt;&lt;em&gt;Our co-founder &lt;a href=&quot;http://twitter.com/sandromancuso&quot;&gt;Sandro Mancuso&lt;/a&gt; was &lt;a href=&quot;http://www.infoq.com/articles/mancuso-software-craftsman&quot;&gt;interviewed by Ben Linders from InfoQ&lt;/a&gt;. Below is the full transcript.&lt;/em&gt;&lt;/p&gt;

</summary>
        
    </entry>
    
    <entry>
        <id>/2015/05/04/side-effects-and-java-8-streams/</id>
        <title>Side effects and Java 8 streams</title>
        <link href="/2015/05/04/side-effects-and-java-8-streams/"/>
        <published>2015-05-04T11:22:00+00:00</published>
        
        <summary type="html">&lt;p&gt;There is a lot of excitement in the Java community since Java 8 was released. Lambdas and Streams are a massive improvement and nobody wants to go back to the old days. Today, however, I want to talk about the caveats of some use of Java Streams.&lt;/p&gt;

</summary>
        
    </entry>
    
    <entry>
        <id>/2015/05/04/creating-a-local-nuget-repository/</id>
        <title>Creating a local NuGet repository for offline development</title>
        <link href="/2015/05/04/creating-a-local-nuget-repository/"/>
        <published>2015-05-04T09:00:00+00:00</published>
        
        <summary type="html">&lt;p&gt;I spend several hours each week on long-distance train journeys and often use the time to code, whether on a pet project or practising a kata or two. Large parts of this journey have patchy-at-best mobile data coverage, so tools with a reliance on a stable internet connection can cause problems. One of these tools is the NuGet Package Manager in Visual Studio.&lt;/p&gt;

</summary>
        
    </entry>
    
    <entry>
        <id>/2015/04/17/design-patterns-in-the-21st-century-part-five/</id>
        <title>Design Patterns in the 21st Century: Conclusion</title>
        <link href="/2015/04/17/design-patterns-in-the-21st-century-part-five/"/>
        <published>2015-04-17T17:00:00+00:00</published>
        
        <summary type="html">&lt;p&gt;This is part five of my talk, &lt;a href=&quot;http://talks.samirtalwar.com/design-patterns-in-the-21st-century.html&quot;&gt;Design Patterns in the 21st Century&lt;/a&gt;.&lt;/p&gt;

</summary>
        
    </entry>
    
    <entry>
        <id>/2015/04/16/design-patterns-in-the-21st-century-part-four/</id>
        <title>Design Patterns in the 21st Century: The Chain of Responsibility Pattern</title>
        <link href="/2015/04/16/design-patterns-in-the-21st-century-part-four/"/>
        <published>2015-04-16T17:30:00+00:00</published>
        
        <summary type="html">&lt;p&gt;Here&#39;s a thing you might not see a lot.&lt;/p&gt;

</summary>
        
    </entry>
    
    <entry>
        <id>/2015/04/15/design-patterns-in-the-21st-century-part-three/</id>
        <title>Design Patterns in the 21st Century: The Adapter Pattern</title>
        <link href="/2015/04/15/design-patterns-in-the-21st-century-part-three/"/>
        <published>2015-04-15T13:00:00+00:00</published>
        
        <summary type="html">&lt;p&gt;This is part three of my talk, &lt;a href=&quot;http://talks.samirtalwar.com/design-patterns-in-the-21st-century.html&quot;&gt;Design Patterns in the 21st Century&lt;/a&gt;.&lt;/p&gt;

</summary>
        
    </entry>
    
    <entry>
        <id>/2015/04/15/making-sense-of-docker-volumes/</id>
        <title>Making Sense of Docker Volumes</title>
        <link href="/2015/04/15/making-sense-of-docker-volumes/"/>
        <published>2015-04-15T09:00:00+00:00</published>
        
        <summary type="html">&lt;p&gt;&lt;a href=&quot;http://www.docker.com&quot;&gt;Docker&lt;/a&gt; is a platform that allows users to build, ship, and run distributed applications. Applications are stored inside &lt;strong&gt;docker containers&lt;/strong&gt;.&lt;/p&gt;

</summary>
        
    </entry>
    
    <entry>
        <id>/2015/04/14/design-patterns-in-the-21st-century-part-two/</id>
        <title>Design Patterns in the 21st Century: The Abstract Factory Pattern</title>
        <link href="/2015/04/14/design-patterns-in-the-21st-century-part-two/"/>
        <published>2015-04-14T09:00:00+00:00</published>
        
        <summary type="html">&lt;p&gt;This is part two of my talk, &lt;a href=&quot;http://talks.samirtalwar.com/design-patterns-in-the-21st-century.html&quot;&gt;Design Patterns in the 21st Century&lt;/a&gt;.&lt;/p&gt;

</summary>
        
    </entry>
    
    <entry>
        <id>/2015/04/13/design-patterns-in-the-21st-century-part-one/</id>
        <title>Design Patterns in the 21st Century, Part One</title>
        <link href="/2015/04/13/design-patterns-in-the-21st-century-part-one/"/>
        <published>2015-04-13T11:30:00+00:00</published>
        
        <summary type="html">&lt;p&gt;I&#39;ve been having a bit of trouble blogging recently. In an effort to get back into it, I thought I&#39;d take &lt;a href=&quot;http://talks.samirtalwar.com/design-patterns-in-the-21st-century.html&quot;&gt;a talk that I presented at JAX London last year&lt;/a&gt;, split it up into blog-sized posts as it&#39;s pretty long, and post them all week. If you haven&#39;t read it before or seen the talk, I hope you enjoy it.&lt;/p&gt;

</summary>
        
    </entry>
    
    <entry>
        <id>/2015/03/29/dangerous-words/</id>
        <title>Dangerous Words</title>
        <link href="/2015/03/29/dangerous-words/"/>
        <published>2015-03-29T21:22:00+00:00</published>
        
        <summary type="html">&lt;p&gt;Ludwig Wittgenstein was one the greatest philosophers of 20th century. His book Tractatus Logico-Philosophicus addresses the limits of language and its relationship with reality. A friend of mine, great polemicist, suggested me to read it some years ago to understand one of his favourites conversational &lt;em&gt;deux ex machina&lt;/em&gt;: &quot;I can&#39;t prove that, because of the inherent insufficiency of the language.&quot;&lt;/p&gt;

</summary>
        
    </entry>
    
</feed>