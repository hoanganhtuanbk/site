<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title>Codurance</title>
    <link href="/atom.xml" rel="self"/>
    <link href=""/>
    <updated>2015-02-23T17:05:26+00:00</updated>
    <id>http://codurance.com</id>
    <author>
        <name>Codurance</name>
        <email>hello@codurance.com</email>
    </author>
    <rights>Copyright (c) Codurance</rights>
    
    <entry>
        <id>/2015/01/27/balanced-abstraction-principle/</id>
        <title>Balanced Abstraction Principle</title>
        <link href="/2015/01/27/balanced-abstraction-principle/"/>
        <published>2015-01-27T10:30:00+00:00</published>
        
        <summary type="html">&lt;p&gt;One of the things that make code complicated to read and understand is when the instructions inside a method are at different levels of abstraction.&lt;/p&gt;

</summary>
        
    </entry>
    
    <entry>
        <id>/2015/01/09/impact-mapping/</id>
        <title>Impact Mapping</title>
        <link href="/2015/01/09/impact-mapping/"/>
        <published>2015-01-09T10:30:00+00:00</published>
        
        <summary type="html">&lt;p&gt;We had the pleasure to visit a client who asked us to facilitate a workshop. The aim was to create a plan for their investors in order to release the next round of funding for a social media website. They had a product backlog that was full of of features but they were not sure how to prioritise them. They also had a release roadmap but were unclear as to why certain things needed to be done.&lt;/p&gt;

</summary>
        
    </entry>
    
    <entry>
        <id>/2014/12/13/naming-test-classes-and-methods/</id>
        <title>Naming Test Classes and Methods</title>
        <link href="/2014/12/13/naming-test-classes-and-methods/"/>
        <published>2014-12-13T00:27:00+00:00</published>
        
        <summary type="html">&lt;p&gt;What should my first test be? What should I test next? These are common questions that I&#39;m asked over and over again. I quite often ask these questions myself. Deciding on what to test is hard. Deciding on the order that things should be tested is even harder.[^1] But writing tests first is not the only problem. How often did we get frustrated while dealing with existing tests which we had no idea what they are testing?&lt;/p&gt;

</summary>
        
    </entry>
    
    <entry>
        <id>/2014/12/06/life-as-an-apprentice/</id>
        <title>What is it like to be a Codurance Apprentice?</title>
        <link href="/2014/12/06/life-as-an-apprentice/"/>
        <published>2014-12-06T18:31:00+00:00</published>
        
        <summary type="html">&lt;p&gt;This month Codurance is celebrating its first birthday. A lot has happened during that time, including the hiring of two apprentices. One of which, I am pleased to say is me!&lt;/p&gt;

</summary>
        
    </entry>
    
    <entry>
        <id>/2014/11/26/looking-forward-to-2015/</id>
        <title>Codurance - Looking forward to 2015</title>
        <link href="/2014/11/26/looking-forward-to-2015/"/>
        <published>2014-11-26T18:31:00+00:00</published>
        
        <summary type="html">&lt;p&gt;One year ago Mash and I were thinking how great it would be to be surrounded by great craftsmen, work with good clients, mentor talented apprentices, and a have decent office. We thought to ourselves: “We don’t want a company with employees. We want a company where we have friends. Friends where besides enjoying their company, we also admired their professionalism and knowledge.&quot; One year later, we are happy to say we achieved all that. We had a great first year and managed to build a very talented team, which we are hoping to grow even more next year.&lt;/p&gt;

</summary>
        
    </entry>
    
    <entry>
        <id>/2014/11/10/not-all-managers-are-stupid/</id>
        <title>Not all managers are stupid</title>
        <link href="/2014/11/10/not-all-managers-are-stupid/"/>
        <published>2014-11-10T04:20:00+00:00</published>
        
        <summary type="html">&lt;p&gt;&lt;em&gt;(The following story was a bit altered in order to keep it short(ish) and to protect the innocents)&lt;/em&gt;&lt;/p&gt;

</summary>
        
    </entry>
    
    <entry>
        <id>/2014/11/09/too-many-cooks/</id>
        <title>Too Many Cooks</title>
        <link href="/2014/11/09/too-many-cooks/"/>
        <published>2014-11-09T11:00:00+00:00</published>
        
        <summary type="html">&lt;p&gt;Last week, &lt;a href=&quot;http://codurance.com/aboutus/ourteam/&quot;&gt;Sandro&lt;/a&gt; and I flew to Bucharest to meet &lt;a href=&quot;http://alexbolboaca.ro/&quot;&gt;Alex&lt;/a&gt; and &lt;a href=&quot;http://adrianbolboaca.ro/&quot;&gt;Adi Bolboaca&lt;/a&gt;, &lt;a href=&quot;http://about.me/aksalmi&quot;&gt;Aki Salmi&lt;/a&gt; and &lt;a href=&quot;http://code-cop.org/&quot;&gt;Peter Kofler&lt;/a&gt;. We didn&#39;t know what to expect: the agenda was to try a &quot;hardcore coderetreat&quot;, in which the constraints would be incredibly difficult, but when you have six headstrong, opinionated people in a room, you really have no idea what&#39;s going to happen.&lt;/p&gt;

</summary>
        
    </entry>
    
    <entry>
        <id>/2014/10/03/guide-to-deploying-artifacts-with-jenkins/</id>
        <title>A Very Quick Guide to Deploying Artifacts With Jenkins</title>
        <link href="/2014/10/03/guide-to-deploying-artifacts-with-jenkins/"/>
        <published>2014-10-03T00:00:00+00:00</published>
        
        <summary type="html">&lt;p&gt;&lt;a href=&quot;http://jenkins-ci.org/&quot;&gt;Jenkins&lt;/a&gt; is an open-source continuous integration server. At Codurance, we use Jenkins to build and test projects to make sure everything is in order before handing over to the client.&lt;/p&gt;

</summary>
        
    </entry>
    
    <entry>
        <id>/2014/10/02/highly-strung/</id>
        <title>Highly Strung</title>
        <link href="/2014/10/02/highly-strung/"/>
        <published>2014-10-02T13:00:00+00:00</published>
        
        <summary type="html">&lt;p&gt;This blog post is way overdue.&lt;/p&gt;

</summary>
        
    </entry>
    
    <entry>
        <id>/2014/07/27/tell-dont-ask/</id>
        <title>Tell don't ask</title>
        <link href="/2014/07/27/tell-dont-ask/"/>
        <published>2014-07-27T12:00:00+00:00</published>
        
        <summary type="html">&lt;p&gt;&lt;strong&gt;Tell don&#39;t ask&lt;/strong&gt; we have all heard it. Yet it is one of the most violated principles. It is also one of the most important principles to follow if you want a design that is flexible to change.&lt;/p&gt;

</summary>
        
    </entry>
    
    <entry>
        <id>/2014/07/18/queue-based-synchronisation/</id>
        <title>Queue Based Synchronisation</title>
        <link href="/2014/07/18/queue-based-synchronisation/"/>
        <published>2014-07-18T12:00:00+00:00</published>
        
        <summary type="html">&lt;p&gt;The first rule of using locks for thread synchronisation is, &lt;strong&gt;&quot;Do NOT use them!&quot;&lt;/strong&gt;. Recently I saw an implementation that made heavy use of locks to synchronise access to a shared cache between two threads. The overall approach is explained in the diagram below:&lt;/p&gt;

</summary>
        
    </entry>
    
    <entry>
        <id>/2014/07/15/mob-programming/</id>
        <title>Mob Programming, and the importance of fun at work</title>
        <link href="/2014/07/15/mob-programming/"/>
        <published>2014-07-15T12:00:00+00:00</published>
        
        <summary type="html">&lt;p&gt;It&#39;s been a few weeks since SoCraTes UK 2014, and I&#39;ve had some time to reflect on the event and my learning experiences. Today, I want to talk about the biggest things that stood out for me.&lt;/p&gt;

</summary>
        
    </entry>
    
    <entry>
        <id>/2014/07/10/GooglePlus-sign-in-with-Scala/</id>
        <title>Google+ Sign-In with Scalatra</title>
        <link href="/2014/07/10/GooglePlus-sign-in-with-Scala/"/>
        <published>2014-07-10T15:35:00+00:00</published>
        
        <summary type="html">&lt;h3&gt;The requirements&lt;/h3&gt;

</summary>
        
    </entry>
    
    <entry>
        <id>/2014/05/26/a-craftsman-is/</id>
        <title>A Software Craftsman Is</title>
        <link href="/2014/05/26/a-craftsman-is/"/>
        <published>2014-05-26T15:00:00+00:00</published>
        
        <summary type="html">&lt;p&gt;Someone who aspires to quality.&lt;/p&gt;

</summary>
        
    </entry>
    
    <entry>
        <id>/2014/05/24/tdd-is-not-about-you/</id>
        <title>TDD is NOT (just) about you</title>
        <link href="/2014/05/24/tdd-is-not-about-you/"/>
        <published>2014-05-24T22:18:00+00:00</published>
        
        <summary type="html">&lt;p&gt;Recently, another big debate about TDD started on Twitter and blogosphere. Is TDD dead? (No, that&#39;s ridiculous.) Does it improve or damage our design? Does it make us faster or slow us down? &lt;a href=&quot;http://twitter.com/sebrose&quot;&gt;Seb Rose&lt;/a&gt; compiled a &lt;a href=&quot;http://claysnow.co.uk/to-tdd-or-not-to-tdd/&quot;&gt;list of blog posts and tweets&lt;/a&gt; about it, so I won’t repeat them here. If you are not aware of the whole discussions, please read all the links Seb collected at the end of &lt;a href=&quot;http://claysnow.co.uk/to-tdd-or-not-to-tdd/&quot;&gt;his post&lt;/a&gt;.&lt;/p&gt;

</summary>
        
    </entry>
    
</feed>