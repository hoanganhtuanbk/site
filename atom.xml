<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title>Codurance</title>
    <link href="/atom.xml" rel="self"/>
    <link href=""/>
    <updated>2015-05-12T23:04:48+00:00</updated>
    <id>http://codurance.com</id>
    <author>
        <name>Codurance</name>
        <email>hello@codurance.com</email>
    </author>
    <rights>Copyright (c) Codurance</rights>
    
    <entry>
        <id>/2015/05/12/does-tdd-lead-to-good-design/</id>
        <title>Does TDD really lead to good design?</title>
        <link href="/2015/05/12/does-tdd-lead-to-good-design/"/>
        <published>2015-05-12T14:32:00+00:00</published>
        
        <summary type="html">&lt;p&gt;Recently I tweeted that &lt;a href=&quot;https://twitter.com/sandromancuso/status/588503877235781632&quot;&gt;TDD can’t lead to a good design if we don’t know what good design looks like&lt;/a&gt;. I was also saying that we probably should teach design before TDD (or at least, at the same time). This tweet led to a discussions with &lt;a href=&quot;https://twitter.com/jbrains&quot;&gt;J.B. Rainsberger&lt;/a&gt;, &lt;a href=&quot;https://twitter.com/RonJeffries&quot;&gt;Ron Jeffries&lt;/a&gt;, and a few others. J.B. and I ended up having a live &lt;a href=&quot;https://www.youtube.com/watch?v=ty3p5VDcoOI&quot;&gt;discussion on Hangout on Air&lt;/a&gt; later on.&lt;/p&gt;

</summary>
        
    </entry>
    
    <entry>
        <id>/2015/05/06/interview-with-sandro-mancuso/</id>
        <title>Q&A about The Software Craftsman</title>
        <link href="/2015/05/06/interview-with-sandro-mancuso/"/>
        <published>2015-05-06T01:26:00+00:00</published>
        
        <summary type="html">&lt;p&gt;&lt;em&gt;Our co-founder &lt;a href=&quot;http://twitter.com/sandromancuso&quot;&gt;Sandro Mancuso&lt;/a&gt; was &lt;a href=&quot;http://www.infoq.com/articles/mancuso-software-craftsman&quot;&gt;interviewed by Ben Linders from InfoQ&lt;/a&gt;. Below is the full transcript.&lt;/em&gt;&lt;/p&gt;

</summary>
        
    </entry>
    
    <entry>
        <id>/2015/05/04/side-effects-and-java-8-streams/</id>
        <title>Side effects and Java 8 streams</title>
        <link href="/2015/05/04/side-effects-and-java-8-streams/"/>
        <published>2015-05-04T11:22:00+00:00</published>
        
        <summary type="html">&lt;p&gt;There is a lot of excitement in the Java community since Java 8 was released. Lambdas and Streams are a massive improvement and nobody wants to go back to the old days. Today, however, I want to talk about the caveats of some use of Java Streams.&lt;/p&gt;

</summary>
        
    </entry>
    
    <entry>
        <id>/2015/05/04/creating-a-local-nuget-repository/</id>
        <title>Creating a local NuGet repository for offline development</title>
        <link href="/2015/05/04/creating-a-local-nuget-repository/"/>
        <published>2015-05-04T09:00:00+00:00</published>
        
        <summary type="html">&lt;p&gt;I spend several hours each week on long-distance train journeys and often use the time to code, whether on a pet project or practising a kata or two. Large parts of this journey have patchy-at-best mobile data coverage, so tools with a reliance on a stable internet connection can cause problems. One of these tools is the NuGet Package Manager in Visual Studio.&lt;/p&gt;

</summary>
        
    </entry>
    
    <entry>
        <id>/2015/04/17/design-patterns-in-the-21st-century-part-five/</id>
        <title>Design Patterns in the 21st Century: Conclusion</title>
        <link href="/2015/04/17/design-patterns-in-the-21st-century-part-five/"/>
        <published>2015-04-17T17:00:00+00:00</published>
        
        <summary type="html">&lt;p&gt;This is part five of my talk, &lt;a href=&quot;http://talks.samirtalwar.com/design-patterns-in-the-21st-century.html&quot;&gt;Design Patterns in the 21st Century&lt;/a&gt;.&lt;/p&gt;

</summary>
        
    </entry>
    
    <entry>
        <id>/2015/04/16/design-patterns-in-the-21st-century-part-four/</id>
        <title>Design Patterns in the 21st Century: The Chain of Responsibility Pattern</title>
        <link href="/2015/04/16/design-patterns-in-the-21st-century-part-four/"/>
        <published>2015-04-16T17:30:00+00:00</published>
        
        <summary type="html">&lt;p&gt;Here&#39;s a thing you might not see a lot.&lt;/p&gt;

</summary>
        
    </entry>
    
    <entry>
        <id>/2015/04/15/design-patterns-in-the-21st-century-part-three/</id>
        <title>Design Patterns in the 21st Century: The Adapter Pattern</title>
        <link href="/2015/04/15/design-patterns-in-the-21st-century-part-three/"/>
        <published>2015-04-15T13:00:00+00:00</published>
        
        <summary type="html">&lt;p&gt;This is part three of my talk, &lt;a href=&quot;http://talks.samirtalwar.com/design-patterns-in-the-21st-century.html&quot;&gt;Design Patterns in the 21st Century&lt;/a&gt;.&lt;/p&gt;

</summary>
        
    </entry>
    
    <entry>
        <id>/2015/04/15/making-sense-of-docker-volumes/</id>
        <title>Making Sense of Docker Volumes</title>
        <link href="/2015/04/15/making-sense-of-docker-volumes/"/>
        <published>2015-04-15T09:00:00+00:00</published>
        
        <summary type="html">&lt;p&gt;&lt;a href=&quot;http://www.docker.com&quot;&gt;Docker&lt;/a&gt; is a platform that allows users to build, ship, and run distributed applications. Applications are stored inside &lt;strong&gt;docker containers&lt;/strong&gt;.&lt;/p&gt;

</summary>
        
    </entry>
    
    <entry>
        <id>/2015/04/14/design-patterns-in-the-21st-century-part-two/</id>
        <title>Design Patterns in the 21st Century: The Abstract Factory Pattern</title>
        <link href="/2015/04/14/design-patterns-in-the-21st-century-part-two/"/>
        <published>2015-04-14T09:00:00+00:00</published>
        
        <summary type="html">&lt;p&gt;This is part two of my talk, &lt;a href=&quot;http://talks.samirtalwar.com/design-patterns-in-the-21st-century.html&quot;&gt;Design Patterns in the 21st Century&lt;/a&gt;.&lt;/p&gt;

</summary>
        
    </entry>
    
    <entry>
        <id>/2015/04/13/design-patterns-in-the-21st-century-part-one/</id>
        <title>Design Patterns in the 21st Century, Part One</title>
        <link href="/2015/04/13/design-patterns-in-the-21st-century-part-one/"/>
        <published>2015-04-13T11:30:00+00:00</published>
        
        <summary type="html">&lt;p&gt;I&#39;ve been having a bit of trouble blogging recently. In an effort to get back into it, I thought I&#39;d take &lt;a href=&quot;http://talks.samirtalwar.com/design-patterns-in-the-21st-century.html&quot;&gt;a talk that I presented at JAX London last year&lt;/a&gt;, split it up into blog-sized posts as it&#39;s pretty long, and post them all week. If you haven&#39;t read it before or seen the talk, I hope you enjoy it.&lt;/p&gt;

</summary>
        
    </entry>
    
    <entry>
        <id>/2015/03/29/dangerous-words/</id>
        <title>Dangerous Words</title>
        <link href="/2015/03/29/dangerous-words/"/>
        <published>2015-03-29T21:22:00+00:00</published>
        
        <summary type="html">&lt;p&gt;Ludwig Wittgenstein was one the greatest philosophers of 20th century. His book Tractatus Logico-Philosophicus addresses the limits of language and its relationship with reality. A friend of mine, great polemicist, suggested me to read it some years ago to understand one of his favourites conversational &lt;em&gt;deux ex machina&lt;/em&gt;: &quot;I can&#39;t prove that, because of the inherent insufficiency of the language.&quot;&lt;/p&gt;

</summary>
        
    </entry>
    
    <entry>
        <id>/2015/03/23/multiple-projects-in-visual-studio/</id>
        <title>Multiple projects in Visual Studio solutions considered harmful</title>
        <link href="/2015/03/23/multiple-projects-in-visual-studio/"/>
        <published>2015-03-23T22:49:00+00:00</published>
        
        <summary type="html">&lt;h1&gt;Multiple projects in Visual Studio solutions considered harmful&lt;/h1&gt;

</summary>
        
    </entry>
    
    <entry>
        <id>/2015/03/23/project-sizing/</id>
        <title>Project Sizing</title>
        <link href="/2015/03/23/project-sizing/"/>
        <published>2015-03-23T14:30:00+00:00</published>
        
        <summary type="html">&lt;p&gt;Sizing a project is one of the most important things we do and it is often the first thing we need precisely when we have the least amount of information. During a pre-sales meeting the client will usually ask for a &quot;ballpark&quot; figure so that they can understand if the project is feasible. We try to get as much information as possible before we provide a very high-level figure. The approach we take depends on whether the client already has a well defined backlog or if they are expecting us to create the backlog as part of the estimation.&lt;/p&gt;

</summary>
        
    </entry>
    
    <entry>
        <id>/2015/03/20/user-stories-guidelines/</id>
        <title>User Story Guidelines</title>
        <link href="/2015/03/20/user-stories-guidelines/"/>
        <published>2015-03-20T21:22:00+00:00</published>
        
        <summary type="html">&lt;p&gt;&lt;em&gt;Disclaimer: This post was extracted from an internal Codurance document used to help our apprentices to learn how we work. We all understand that each project is different and that by no means we can apply exactly the same techniques and practices everywhere. However, the text below serves not only as a foundation but also as a guideline for all of us when it comes to user stories. There are many good books and posts written about user stories. By no means this post is meant to be a summary of all the good practices around this area.&lt;/em&gt;&lt;/p&gt;

</summary>
        
    </entry>
    
    <entry>
        <id>/2015/03/17/javascript_a_tough_love/</id>
        <title>JavaScript - A Tough Love</title>
        <link href="/2015/03/17/javascript_a_tough_love/"/>
        <published>2015-03-17T10:49:00+00:00</published>
        
        <summary type="html">&lt;p&gt;In the 90’s we were witnesses of browser wars. Wars which created one of the most hated languages: Javascript. Web designers touch by Javascript at the beginning of 21st century constantly refused to fix bugs titled as “It doesn’t work in Internet Explorer” or “Netscape Navigator doesn’t show…”. At this time we used pure languages and tried to understand the design of our web browser in order to cope with compatibility issues.&lt;/p&gt;

</summary>
        
    </entry>
    
</feed>